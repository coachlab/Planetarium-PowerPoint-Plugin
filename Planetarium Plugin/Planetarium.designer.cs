#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Planetarium_Plugin
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PlanetariumDB")]
	public partial class PlanetariumDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDictionary(Dictionary instance);
    partial void UpdateDictionary(Dictionary instance);
    partial void DeleteDictionary(Dictionary instance);
    partial void InsertKeyword(Keyword instance);
    partial void UpdateKeyword(Keyword instance);
    partial void DeleteKeyword(Keyword instance);
    #endregion
		
		public PlanetariumDataContext() : 
				base(global::Planetarium_Plugin.Properties.Settings.Default.PlanetariumDBConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetariumDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetariumDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetariumDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetariumDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dictionary> Dictionaries
		{
			get
			{
				return this.GetTable<Dictionary>();
			}
		}
		
		public System.Data.Linq.Table<Keyword> Keywords
		{
			get
			{
				return this.GetTable<Keyword>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dictionary")]
	public partial class Dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Dictionary_ID;
		
		private string _Type;
		
		private string _Slide_URL;
		
		private EntitySet<Keyword> _Keywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDictionary_IDChanging(int value);
    partial void OnDictionary_IDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSlide_URLChanging(string value);
    partial void OnSlide_URLChanged();
    #endregion
		
		public Dictionary()
		{
			this._Keywords = new EntitySet<Keyword>(new Action<Keyword>(this.attach_Keywords), new Action<Keyword>(this.detach_Keywords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dictionary_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Dictionary_ID
		{
			get
			{
				return this._Dictionary_ID;
			}
			set
			{
				if ((this._Dictionary_ID != value))
				{
					this.OnDictionary_IDChanging(value);
					this.SendPropertyChanging();
					this._Dictionary_ID = value;
					this.SendPropertyChanged("Dictionary_ID");
					this.OnDictionary_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slide_URL", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Slide_URL
		{
			get
			{
				return this._Slide_URL;
			}
			set
			{
				if ((this._Slide_URL != value))
				{
					this.OnSlide_URLChanging(value);
					this.SendPropertyChanging();
					this._Slide_URL = value;
					this.SendPropertyChanged("Slide_URL");
					this.OnSlide_URLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dictionary_Keyword", Storage="_Keywords", ThisKey="Dictionary_ID", OtherKey="Dictionary_ID")]
		public EntitySet<Keyword> Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				this._Keywords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Keywords(Keyword entity)
		{
			this.SendPropertyChanging();
			entity.Dictionary = this;
		}
		
		private void detach_Keywords(Keyword entity)
		{
			this.SendPropertyChanging();
			entity.Dictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Keyword")]
	public partial class Keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Dictionary_ID;
		
		private string _Phrase;
		
		private int _Slide_Num;
		
		private int _Keyword_ID;
		
		private EntityRef<Dictionary> _Dictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDictionary_IDChanging(int value);
    partial void OnDictionary_IDChanged();
    partial void OnPhraseChanging(string value);
    partial void OnPhraseChanged();
    partial void OnSlide_NumChanging(int value);
    partial void OnSlide_NumChanged();
    partial void OnKeyword_IDChanging(int value);
    partial void OnKeyword_IDChanged();
    #endregion
		
		public Keyword()
		{
			this._Dictionary = default(EntityRef<Dictionary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dictionary_ID", DbType="Int NOT NULL")]
		public int Dictionary_ID
		{
			get
			{
				return this._Dictionary_ID;
			}
			set
			{
				if ((this._Dictionary_ID != value))
				{
					if (this._Dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDictionary_IDChanging(value);
					this.SendPropertyChanging();
					this._Dictionary_ID = value;
					this.SendPropertyChanged("Dictionary_ID");
					this.OnDictionary_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phrase", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Phrase
		{
			get
			{
				return this._Phrase;
			}
			set
			{
				if ((this._Phrase != value))
				{
					this.OnPhraseChanging(value);
					this.SendPropertyChanging();
					this._Phrase = value;
					this.SendPropertyChanged("Phrase");
					this.OnPhraseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slide_Num", DbType="Int NOT NULL")]
		public int Slide_Num
		{
			get
			{
				return this._Slide_Num;
			}
			set
			{
				if ((this._Slide_Num != value))
				{
					this.OnSlide_NumChanging(value);
					this.SendPropertyChanging();
					this._Slide_Num = value;
					this.SendPropertyChanged("Slide_Num");
					this.OnSlide_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keyword_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Keyword_ID
		{
			get
			{
				return this._Keyword_ID;
			}
			set
			{
				if ((this._Keyword_ID != value))
				{
					this.OnKeyword_IDChanging(value);
					this.SendPropertyChanging();
					this._Keyword_ID = value;
					this.SendPropertyChanged("Keyword_ID");
					this.OnKeyword_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dictionary_Keyword", Storage="_Dictionary", ThisKey="Dictionary_ID", OtherKey="Dictionary_ID", IsForeignKey=true)]
		public Dictionary Dictionary
		{
			get
			{
				return this._Dictionary.Entity;
			}
			set
			{
				Dictionary previousValue = this._Dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dictionary.Entity = null;
						previousValue.Keywords.Remove(this);
					}
					this._Dictionary.Entity = value;
					if ((value != null))
					{
						value.Keywords.Add(this);
						this._Dictionary_ID = value.Dictionary_ID;
					}
					else
					{
						this._Dictionary_ID = default(int);
					}
					this.SendPropertyChanged("Dictionary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
